#!/bin/env python

"""Get remote host info"""

from urllib.error import HTTPError
from urllib.error import URLError
from urllib.request import urlopen
import json
import socket
import sys

import prettytable


from lib.logger import return_logger


class GetRemoteHost():
    """Class for getting remote host info"""

    def __init__(self):
        self.url = "https://ipinfo.io"
        header = ["IP Address", "Remote Host", "Region", "Country Code"]
        self.table = prettytable.PrettyTable(header)
        self.logger = return_logger()

    @staticmethod
    def get_my_global_ip_info(url, logger=None):
        """Get global IP address via ipinfo.io."""

        try:
            with urlopen(url) as ipinfo_object:
                ipinfo_str = ipinfo_object.read()
                ipinfo = json.loads(ipinfo_str)
        except (HTTPError, URLError) as exception:
            logger.error(exception)
            sys.exit(1)
        return ipinfo

    @staticmethod
    def get_remote_host_from_ipaddr(ipaddr):
        """Get remote host information from given ipaddr."""
        try:
            remote_host_object = socket.gethostbyaddr(ipaddr)
            remote_host = remote_host_object[0]
        except socket.herror:
            remote_host = ipaddr
        return remote_host

    def get_country_info_from_ipaddr(self):
        """Get country information in tuple from given ipaddr."""
        ip_info = self.get_my_global_ip_info(self.url)
        region = ip_info["region"]
        country_code = ip_info["country"]
        return (region, country_code)

    def do_task(self):
        """Get information and add them to table instance"""
        ip_addr = self.get_my_global_ip_info(self.url)["ip"]
        remote_host = self.get_remote_host_from_ipaddr(ip_addr)
        region, country_code = self.get_country_info_from_ipaddr()

        content = [ip_addr, remote_host, region, country_code]
        self.table.add_row(content)
        self.logger.info(self.table)


if __name__ == "__main__":
    WORKER = GetRemoteHost()
    WORKER.do_task()
